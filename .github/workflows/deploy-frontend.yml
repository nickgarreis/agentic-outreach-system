# Deploy Frontend to Production using Option 3: Pass environment variables via CLI
# This workflow deploys the frontend to Vercel with environment variables passed
# directly through the Vercel CLI using -e flags, giving us full control

name: Deploy Frontend to Production

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Build application locally for testing
        working-directory: ./frontend
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment information
        working-directory: ./frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts for Vercel
        working-directory: ./frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel with environment variables (Option 3)
        working-directory: ./frontend
        run: |
          # Deploy using Option 3: Pass environment variables directly via CLI flags
          vercel deploy --prebuilt --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            -e NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            -e NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY }}" \
            > deployment-url.txt
          
          # Output deployment URL
          echo "Deployment URL: $(cat deployment-url.txt)"
          echo "deployment_url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
        id: deploy

      - name: Comment deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            const status = '${{ job.status }}';
            const commit_sha = context.sha;
            
            const body = status === 'success' 
              ? `✅ Frontend deployed to production: ${deploymentUrl}`
              : `❌ Frontend deployment failed. Check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commit_sha,
              body: body
            });